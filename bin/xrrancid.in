#! @PERLV_PATH@
##
## $Id: xrrancid.in 2369 2012-01-30 21:06:03Z heas $
##
## @PACKAGE@ @VERSION@
## Copyright (c) 1997-2010 by Terrapin Communications, Inc.
## All rights reserved.
##
## This code is derived from software contributed to and maintained by
## Terrapin Communications, Inc. by Henry Kilmer, John Heasley, Andrew Partan,
## Pete Whiting, Austin Schutz, and Andrew Fort.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. All advertising materials mentioning features or use of this software
##    must display the following acknowledgement:
##        This product includes software developed by Terrapin Communications,
##        Inc. and its contributors for RANCID.
## 4. Neither the name of Terrapin Communications, Inc. nor the names of its
##    contributors may be used to endorse or promote products derived from
##    this software without specific prior written permission.
## 5. It is requested that non-binding fixes and modifications be contributed
##    back to Terrapin Communications, Inc.
##
## THIS SOFTWARE IS PROVIDED BY Terrapin Communications, INC. AND CONTRIBUTORS
## ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
## TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COMPANY OR CONTRIBUTORS
## BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
#
#  RANCID - Really Awesome New Cisco confIg Differ
#
# usage: xrrancid [-dV] [-l] [-f filename | hostname]
#
use Getopt::Std;
getopts('dflV');
if ($opt_V) {
    print "@PACKAGE@ @VERSION@\n";
    exit(0);
}
$log = $opt_l;
$debug = $opt_d;
$file = $opt_f;
$host = $ARGV[0];
$proc = "";
$clean_run = 0;
$found_end = 0;
$found_version = 0;
$found_env = 0;
$found_diag = 0;
$timeo = 90;				# clogin timeout in seconds

my(@commandtable, %commands, @commands);# command lists
my($aclsort) = ("ipsort");		# ACL sorting mode
my($config_register);			# configuration register value
my($filter_commstr);			# SNMP community string filtering
my($filter_pwds);			# password filtering mode
my @filter_filesystems = ();            # filesystems filtering mode, default is filter none

my $TIMESTAMP = qr{ (Mon|Tue|Wed|Thu|Fri|Sat|Sun) \s*                    # day of week 
		    (Jan|Feb|Mar|Apr|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \s*    # month
                    \d+ \s*                                              # day
                    \d+:\d+:\d+ \s*                                      # clock
                    \d{4} \s*                                            # year
                  }xms;

# This routine is used to print out the router configuration
sub ProcessHistory {
    my($new_hist_tag,$new_command,$command_string,@string) = (@_);
    if ((($new_hist_tag ne $hist_tag) || ($new_command ne $command))
	&& scalar(%history)) {
	print eval "$command \%history";
	undef %history;
    }
    if (($new_hist_tag) && ($new_command) && ($command_string)) {
	if ($history{$command_string}) {
	    $history{$command_string} = "$history{$command_string}@string";
	} else {
	    $history{$command_string} = "@string";
	}
    } elsif (($new_hist_tag) && ($new_command)) {
	$history{++$#history} = "@string";
    } else {
	print "@string";
    }
    $hist_tag = $new_hist_tag;
    $command = $new_command;
    1;
}

sub numerically { $a <=> $b; }

# This is a sort routine that will sort numerically on the
# keys of a hash as if it were a normal array.
sub keynsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort numerically keys(%lines)) {
	$sorted_lines[$i] = $lines{$key};
	$i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# keys of a hash as if it were a normal array.
sub keysort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort keys(%lines)) {
	$sorted_lines[$i] = $lines{$key};
	$i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# values of a hash as if it were a normal array.
sub valsort{
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $key (sort values %lines) {
	$sorted_lines[$i] = $key;
	$i++;
    }
    @sorted_lines;
}

# This is a numerical sort routine (ascending).
sub numsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $num (sort {$a <=> $b} keys %lines) {
	$sorted_lines[$i] = $lines{$num};
	$i++;
    }
    @sorted_lines;
}

# This is a sort routine that will sort on the
# ip address when the ip address is anywhere in
# the strings.
sub ipsort {
    local(%lines) = @_;
    local($i) = 0;
    local(@sorted_lines);
    foreach $addr (sort sortbyipaddr keys %lines) {
	$sorted_lines[$i] = $lines{$addr};
	$i++;
    }
    @sorted_lines;
}

# These two routines will sort based upon IP addresses
sub ipaddrval {
    my(@a) = ($_[0] =~ m#^(\d+)\.(\d+)\.(\d+)\.(\d+)$#);
    $a[3] + 256 * ($a[2] + 256 * ($a[1] +256 * $a[0]));
}
sub sortbyipaddr {
    &ipaddrval($a) <=> &ipaddrval($b);
}

# This routine parses "show install summary"
sub ShowInstallSummary {
  print STDERR "    In ShowInstallSummary: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);
    
    ProcessHistory("COMMENTS", "keysort", "A10", "! $_");
  }
  ProcessHistory("COMMENTS", "keysort", "A19", "!\n");
  
  return(0);
}


# This routine parses "show license"
sub ShowLicense {
  print STDERR "    In ShowLicense: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);
    
    ProcessHistory("COMMENTS", "keysort", "A20", "! $_");
  }
  ProcessHistory("COMMENTS", "keysort", "A29", "!\n");
  
  return(0);
}

# This routine parses "admin show variables boot"
sub ShowBootVar {
  print STDERR "    In ShowBootVar: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);
    
    ProcessHistory("COMMENTS", "keysort", "A30", "! $_");
  }
  ProcessHistory("COMMENTS", "keysort", "A39", "!\n");
  
  return(0);
}


# This routine parses "admin show redundancy"
sub ShowRedundancy {
  print STDERR "    In ShowRedundancy: $_" if ($debug);
  
  my $skip_next = 0;

  while (<INPUT>) {
    # delete non-ascii chars, incl new line
    tr/ -~//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip next line if skip_next. quite logical uh?
    if ($skip_next) { $skip_next = 0; next; };
    
    # skip lines starting with white space and containing some text
    /^\s+.*\w/ && do { $skip_next = 1; next; };

    # skip certain lines without leading white space
    # unfortunately, this will be a VERY uncomplete list as
    # Cisco haven't documented the output
    next if (/^Current active redcon state/);
    next if (/^All not-ready/);
    /^Details/ && do { $skip_next = 1; next; };

    # lines with a time stamp have a trailing "X weeks, Y days, ... Z seconds ago"
    # remove that trail, else we get a diff every single time.
    / ( .* $TIMESTAMP ) /xms && do {
	# Of some reason (smells like a bug) the datetime do have a 1 second
	# jitter, which of course gives false positives in a diff. 
	# If we removes the seconds from the datetime, the effect is reduced, 
	# but not eliminated. 
	my $str = $1;
	$str =~ s/(.*\d+:\d+):\d+(.*)/\1\2/;
	ProcessHistory("COMMENTS", "keysort", "B10", "! $str\n");
	next;
    };

    # print rest of the lines verbatim
    ProcessHistory("COMMENTS", "keysort", "B10", "! $_\n");
  }
  ProcessHistory("COMMENTS", "keysort", "B19", "!\n"); 
  
  return(0);
}


# This routine parses "dir /all (bootflash|disk|compactflash|harddisk):"
sub DirSlotN {
  print STDERR "    In DirSlotN: $_" if ($debug);

  my($dev) = (/\s([^\s]+):/);

  # does any of the filesystems in $filter_filesystems match $dev?
  # if so, this filesystem should be hidden
  my $do_hide = 0;
  foreach (@filter_filesystems) {
      $do_hide = 1 if ($dev =~ /$_/);
  }

  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip everything but prompt detection when hiding filesystem
    next if ($do_hide);

    # skip blank lines
    next if (/^\s*$/);
    
    return(1) if /^\s*\^\s*$/;
    return(1) if /Line has invalid autocommand /;
    return(1) if /(Invalid input detected|Type help or )/;
    return(1) if /(No such device|Error Sending Request)/i;
    return(1) if /\%Error: No such file or directory/;
    return(1) if /No space information available/;
    return(-1) if /\%Error calling/;
    return(-1) if /(: device being squeezed|ATA_Status time out)/i; # busy
    return(-1) if (/command authorization failed/i);
    return(1) if /(Open device \S+ failed|Error opening \S+:)/;
    
    if (/.*\((\d+) bytes free\)/) {
      my($tmp) = int($1 / (1024 * 1024));
      s/$1 bytes free/$tmp MBytes free/;
    }
    ProcessHistory("COMMENTS", "keysort", "C10", "! $dev: $_");
  }
  
  ProcessHistory("COMMENTS", "keysort", "C10", "!\n") unless ($do_hide);
  return(0);
}


# This routine parses "show platform"
# This will create arrays for hw info.
sub ShowPlatform {
  print STDERR "    In ShowPlatform: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line and tab
    tr/ -~\n\t//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);
    
    # expand tabs to spaces for prettier look
    my $str = $_;
    1 while $str =~ s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e;
    
    ProcessHistory("COMMENTS", "keysort", "D4", "! $str");
  }
  ProcessHistory("COMMENTS", "keysort", "D4", "!\n");
  
  return(0);
}

# This routine parses "show version"
sub ShowVersion {
  print STDERR "    In ShowVersion: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);
    next if (/^\s*$/);
      
    /(\S+)\s+(?:\((\S+)\)\s+processor|\(revision[^)]+\)).*\s+with (\S+k) bytes/i && do {
      my $model = $1;
      my $cpu   = $2 || "";
      my $mem   = $3;
      
      # the next line ought to be the more specific cpu info, grab it.
      $_ = <INPUT>;
      if (/^$cpu processor at/i) {
	$cpu = $_;
	chomp($cpu);
      }

      ProcessHistory("COMMENTS", "keysort", "D1", "! Chassis: $model\n");
      ProcessHistory("COMMENTS", "keysort", "D12", "! Memory: main $mem\n");
      if ($cpu) {
	ProcessHistory("COMMENTS", "keysort", "D11", "! CPU: $cpu\n");
      }
      next;
    };

    /^(\d+[kKmM]) bytes of non-volatile/ && do {
      ProcessHistory("COMMENTS", "keysort", "D13", "! Memory: nvram $1" . "bytes\n"); 
      next;
    };

    /^(\d+[kKmM]) bytes of (?:compact )*flash/ && do {
      ProcessHistory("COMMENTS", "keysort", "D13", "! Memory: flash $1" . "bytes\n"); 
      next;
    };

    /^(\d+[kKmM]) bytes of Flash internal/ && do {
      ProcessHistory("COMMENTS", "keysort", "D13", "! Memory: bootflash $1" . "bytes\n"); 
      next;
    };

    /^(\d+[kKmM]) bytes of hard disk/ && do {
      ProcessHistory("COMMENTS", "keysort", "D13", "! Memory: hard disk $1" . "bytes\n"); 
      next;
    };

    /^(\d+[kKmM]) bytes of ATA PCMCIA card at disk (\d+)/i && do {
      ProcessHistory("COMMENTS", "keysort", "D13", "! Memory: pcmcia disk$2 $1" . "bytes\n");
      next;
    };
  }
  ProcessHistory("COMMENTS", "keysort", "D19", "!\n");
  
  return(0);
}


# This routine parses "show inventory".
sub ShowInventory {
  print STDERR "    In ShowInventory: $_" if ($debug);

  my $key = "D22";

  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    return if (/^\s*\^$/);
    last if (/^$prompt/);
    next if /\s*$cmd\s*$/;

    # skip blank lines
    next if (/^\s*$/);

    if (/^NAME: ([^,]+), DESCR: (.*)/) {
      my $slot = $1;
      my $desc = $2;
      $key = ($slot =~ /Chassi/i ? "D21" : "D22");
      ProcessHistory("COMMENTS", "keysort", $key, "! SLOT: $slot\n");
      ProcessHistory("COMMENTS", "keysort", $key, "! DESC: $desc\n");
      next;
    }

    # split PID/VID/SN line
    if (/^PID: (\S*)\s*, VID: (\S*)\s*, SN: (\S*)\s*$/) {
      my $entries = "";
      $entries .= "! PID : $1\n" if ($1);
      $entries .= "! VID : $2\n" if ($2 && $2 !~ m!N/A!i);
      $entries .= "! SN  : $3\n" if ($3);
      ProcessHistory("COMMENTS", "keysort", $key, "$entries!\n");
      next;
    }
  }
  ProcessHistory("COMMENTS", "keysort", "D29", "!\n");

  return(0);
}

# This routine parses "show rpl maximum"
sub ShowRPL {
    print STDERR "    In ShowRPL: $_" if ($debug);

    while (<INPUT>) {
	tr/\015//d;
	last if (/^$prompt/);
	next if (/^(\s*|\s*$cmd\s*)$/);
	return(1) if /^\s*\^\s*$/;
	return(1) if (/Line has invalid autocommand /);
	return(1) if (/(Invalid (input|command) detected|Type help or )/i);
	return(1) if (/Ambiguous command/i);
	return(-1) if (/command authorization failed/i);

	ProcessHistory("COMMENTS","keysort","RPLMAX","! $_");
    }
    ProcessHistory("COMMENTS","keysort","RPLMAX","!\n");
    return(0);
}

# This routine parses "show dsc all"
sub ShowDSC {
  print STDERR "    In ShowDSC: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line and tabs
    tr/ -~\n\t//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);

    my $str = $_;
    
    # expand tabs to spaces for prettier look
    1 while $str =~ s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e;
    
    ProcessHistory("COMMENTS", "keysort", "D31", "! $str");
  }
  ProcessHistory("COMMENTS", "keysort", "D39", "!\n");
  
  return(0);
}


# This routine parses "admin show processes aborts location all"
sub ShowProcessAborts {
  print STDERR "    In ShowProcessAborts: $_" if ($debug);

  my $node = "";
  my $separator_needed = 0;

  # print header
  ProcessHistory("COMMENTS", "keysort", "E10", "! Process aborts:\n");
  ProcessHistory("COMMENTS", "keysort", "E10", "! ===============\n");

  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);

    # filter dashed lines
    next if (/^[-]+$/);

    # if no aborts found, keep shut
    next if (/^no process aborts found/i);

    /^node:\s*(.*)$/ && do {
	# if this is not the first occurance, set 
	# separator_nedded flag
	$separator_needed = ($node ne "");
	$node = $1;
	next;
    };

    if ($separator_needed) {
	ProcessHistory("COMMENTS", "keysort", "E10", "!\n");
	$separator_needed = 0;
    }
    ProcessHistory("COMMENTS", "keysort", "E10", "! Node: $node\n");
    ProcessHistory("COMMENTS", "keysort", "E10", "! $_");
  }
  ProcessHistory("COMMENTS", "keysort", "E19", "!\n");
  
  return(0);
}


# This routine parses "admin show context location all"
sub ShowContext {
  print STDERR "    In ShowContext: $_" if ($debug);

  my $node = "";
  my $separator_needed = 0;

  # print header
  ProcessHistory("COMMENTS", "keysort", "E20", "! Contexts:\n");
  ProcessHistory("COMMENTS", "keysort", "E20", "! =========\n");

  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    next if (/\s*$cmd\s*$/);

    # skip blank lines
    next if (/^\s*$/);

    # filter dashed lines
    next if (/^[-]+$/);

    /^node:\s*(.*)$/ && do {
	# if this is not the first occurance, set 
	# separator_nedded flag
	$separator_needed = ($node ne "");
	$node = $1;
	next;
    };

    /^Crashed pid/ && do {
	if ($separator_needed) {
	    ProcessHistory("COMMENTS", "keysort", "E20", "!\n");
	    $separator_needed = 0;
	}
	ProcessHistory("COMMENTS", "keysort", "E20", "! Node: $node\n");
	ProcessHistory("COMMENTS", "keysort", "E20", "! $_");
	next;
    }; 

    /^(Crash|Process|Signal|Core)/ && do {
	if ($separator_needed) {
	    ProcessHistory("COMMENTS", "keysort", "E20", "!\n");
	    $separator_needed = 0;
	}
	ProcessHistory("COMMENTS", "keysort", "E20", "! $_");
	next;
    }; 
  }
  ProcessHistory("COMMENTS", "keysort", "E29", "!\n");
  
  return(0);
}


# This routine processes a "write term"
sub WriteTerm {
  print STDERR "    In WriteTerm: $_" if ($debug);

  # add two separator lines at top
  ProcessHistory("", "", "", "!\n!\n");

  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
 
    /Non-Volatile memory is in use/  && return(-1); # NvRAM is locked

    # skip some initial crap
    next if /^\s*Building configuration/;
    next if /^!+\s+Last configuration/;

    # username/secret command
    /^(\s*secret)/ && do {
      if ($filter_pwds >= 2) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # username/password and bgp-ne/password commands
    /^(\s*password)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # system wide tacacs-key
    /^(\s*tacacs-server key)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # per radius/tacacs-server key
    /^(\s*key)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };
    
    
    # services passwords
    /^(\s*ftp client (?:anonymous-)*password)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };
    
    /^(\s*sftp-password)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };
    
    /(\s*authentication-key)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };
    
    
    # protocols authentication
    /^(\s*hsrp \d+ authentication)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n"); 
	next;
      }
    };
    
    /^(\s*vrrp \d+ text-authentication)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n"); 
	next;
      }
    };
    
    /^(\s*ppp (chap|ms-chap) password)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };
    
    /^(\s*ppp pap sent-username \S+ password)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # ldp
    /^(\s*neighbor \S+ password)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    
    # is-is
    /^(\s*lsp-password\s+(accept|text|hmac-md5))/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    /^(\s*hello-password\s+(accept|text|hmac-md5))/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # ospfv2
    /^(\s*authentication-key)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # ospfv3
    /^(\s*authentication ipsec spi)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # ipsec
    /(\s*pre-shared-key)/ && do {
      if ($filter_pwds >= 1) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    # snmp
    /^(\s*snmp-server host \S+)/ && do {
        if ($filter_commstr) {
            ProcessHistory("", "", "", "!$1 <removed>\n");
            next;
        }
    };

    /^(\s*snmp-server community)/ && do {
        if ($filter_commstr) {
            ProcessHistory("", "", "", "!$1 <removed>\n");
            next;
        } 
    };

    /^end$/ && do {
      $found_end = 1;
      last;
    };
    
    # catch anything that wasn't matched above.
    ProcessHistory("", "", "", "$_");
    
  }
  
  ProcessHistory("", "", "", "$_");
  return 0;
}


# This routine processes a "admin show running-config"
sub AdminShowRunning {
  print STDERR "    In AdminShowRunning: $_" if ($debug);

  # add a separator line at top
  ProcessHistory("", "", "", "!\n");

  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
 
    /Non-Volatile memory is in use/  && return(-1); # NvRAM is locked

    # skip some initial crap
    next if /^\s*Building configuration/;
    next if /^!+\s+Last configuration/;

    # username/secret command
    /^(\s*secret)/ && do {
      if ($filter_pwds >= 2) {
	ProcessHistory("", "", "", "!$1 <removed>\n");
	next;
      }
    };

    /^end$/ && do {
      $found_end = 1;
      last;
    };
    
    # catch anything that wasn't matched above.
    ProcessHistory("", "", "", "$_");
    
  }
  
  ProcessHistory("", "", "", "$_");
  return 0;
}


# This routine filters all output until return of propmt
sub FilterAll {
  print STDERR "    In FilterAll: $_" if ($debug);
  
  while (<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    last if (/^$prompt/);
    return(1) if (/Line has invalid autocommand /);
    return(1) if (/(Invalid (input|command) detected|Type help or )/i);
    return(1) if (/\%Error: No such file or directory/);
    return(-1) if (/command authorization failed/i);
    return(-1) if (/% ?configuration buffer full/i);
  }
}

# dummy function
sub DoNothing {print STDOUT;}

# Main
@commandtable = 
(
 # Disable timestamps in output
 {'terminal no-timestamp'             => 'FilterAll' },  # XR 3.6 style
 {'terminal exec prompt no-timestamp' => 'FilterAll' },  # XR 3.8 style

 # XR IMAGE commands
 {'admin show install summary'	=> 'ShowInstallSummary'},
 {'admin show license'	        => 'ShowLicense'},
 {'admin show variables boot'   => 'ShowBootVar'},

 # REDUNDANCY commands
 {'admin show redundancy'       => 'ShowRedundancy'},

 # FILESYSTEMS comamnds
 {'dir /all bootflash:'	        => 'DirSlotN'},
 {'dir /all disk0:'		=> 'DirSlotN'},
 {'dir /all disk0a:'		=> 'DirSlotN'},
 {'dir /all disk1:'		=> 'DirSlotN'},
 {'dir /all disk1a:'		=> 'DirSlotN'},
 {'dir /all compactflash:'	=> 'DirSlotN'},
 {'dir /all compactflasha:'	=> 'DirSlotN'},
 {'dir /all harddisk:'	        => 'DirSlotN'},
 {'dir /all harddiska:'	        => 'DirSlotN'},
 {'dir /all harddiskb:'	        => 'DirSlotN'},

 # HARDWARE commands
 {'show version'		=> 'ShowVersion'},
 {'show platform'	        => 'ShowPlatform'},
 {'admin show inventory'	=> 'ShowInventory'},
 {'admin show dsc all'	        => 'ShowDSC'},

 # DIAGNOSTIC commands
 {'admin show processes aborts location all' => 'ShowProcessAborts'},
 {'admin show context location all'          => 'ShowContext'},

 # HARDWARE LIMITS
 {'show rpl maximum'		=> 'ShowRPL'},

 # RUNNING-CONFIG commands
 {'admin show running-config'   => 'AdminShowRunning'},
 {'show running-config'		=> 'WriteTerm'},
);

# Use an array to preserve the order of the commands and a hash for mapping
# commands to the subroutine and track commands that have been completed.
@commands = map(keys(%$_), @commandtable);
%commands = map(%$_, @commandtable);

$cisco_cmds = join(";", @commands);
$cmds_regexp = join("|", @commands);

unless ($host) {
  unless ($file) {
    print(STDERR "Too few arguments: file or host name required\n");
    exit(1);
  }
  else {
    $host = $file;
  }
} 

open(OUTPUT, "> $host.new") 
  or die "Can't open $host.new for writing: $!\n";
select(OUTPUT);

# make OUTPUT unbuffered if debugging
if ($debug) {
  $| = 1;
}

if ($file) {
  print STDERR "opening file $host\n" if ($debug);
  print STDOUT "opening file $host\n" if ($log);
  open(INPUT,"< $host") 
    or die "open failed for $host: $!\n";
} else {
  print STDERR "executing clogin -autoenable -t $timeo -c\"$cisco_cmds\" $host\n" if ($debug);
  print STDOUT "executing clogin -autoenable -t $timeo -c\"$cisco_cmds\" $host\n" if ($log);
  if (defined($ENV{NOPIPE}) && $ENV{NOPIPE} =~ /^YES/i) {
    system "clogin -autoenable -t $timeo -c \"$cisco_cmds\" $host </dev/null > $host.raw 2>&1" 
      or die "clogin failed for $host: $!\n";
    open(INPUT, "< $host.raw") 
      or die "clogin failed for $host: $!\n";
  } else {
    open(INPUT,"clogin -autoenable -t $timeo -c \"$cisco_cmds\" $host </dev/null |") 
      or die "clogin failed for $host: $!\n";
  }
}

# determine ACL sorting mode
if ($ENV{"ACLSORT"} =~ /no/i) {
    $aclsort = "";
}
# determine community string filtering mode
if (defined($ENV{"NOCOMMSTR"}) &&
    ($ENV{"NOCOMMSTR"} =~ /yes/i || $ENV{"NOCOMMSTR"} =~ /^$/)) {
    $filter_commstr = 1;
} else {
    $filter_commstr = 0;
}
# determine password filtering mode
if ($ENV{"FILTER_PWDS"} =~ /no/i) {
    $filter_pwds = 0;
} elsif ($ENV{"FILTER_PWDS"} =~ /all/i) {
    $filter_pwds = 2;
} else {
    $filter_pwds = 1;
}

# PoC for filesystem filtering flag
if (defined($ENV{"XRRANCID_NOFILESYSTEMS"})) {
    if ($ENV{"XRRANCID_NOFILESYSTEMS"} =~ /^(yes|on|1)$/) {
	@filter_filesystems = ("bootflash", "disk", "compactflash", "harddisk");
    }
    elsif ($ENV{"XRRANCID_NOFILESYSTEMS"} =~ /^(no|off|0)$/) {
	@filter_filesystems = ();
    }
    else {
	@filter_filesystems = split(/,/, $ENV{"XRRANCID_NOFILESYSTEMS"});
    }
} 


if ($debug) {
  print STDERR "Options:\n";
  print STDERR " file: ", defined $file ? $file : "<undef>", "\n";
  print STDERR " host: ", defined $host ? $host : "<undef>", "\n";
  print STDERR " community filter is: ", $filter_commstr ? "on" : "off", "\n";
  print STDERR " password filter is: ";
  if ($filter_pwds == 0) {
    print STDERR "off\n";
  }
  elsif ($filter_pwds == 1) {
    print STDERR "on (limited)\n";
  }
  else {
    print STDERR "on (all)\n";
  }
  print STDERR " filesystem filter is: ", 
  @filter_filesystems ? join(', ', @filter_filesystems) : "off",
  "\n";
}

ProcessHistory("","","","! RANCID-CONTENT-TYPE: cisco ios-xr\n!\n");
ProcessHistory("COMMENTS", "keysort", "A", "! IOS-XR IMAGE INFORMATION\n!\n");
ProcessHistory("COMMENTS", "keysort", "B", "! REDUNDANCY INFORMATION\n!\n");
ProcessHistory("COMMENTS", "keysort", "C", "! FILE SYSTEMS INFORMATION\n!\n"); 
ProcessHistory("COMMENTS", "keysort", "D", "! HARDWARE INFORMATION\n!\n");
ProcessHistory("COMMENTS", "keysort", "E", "! DIAGNOSTICS\n!\n");

TOP: while(<INPUT>) {
    # delete non-ascii chars, except new line
    tr/ -~\n//cd;
    if (/[>#]\s?exit$/) {
	$clean_run = 1;
	last;
    }
    if (/^Error:/) {
	print STDOUT ("$host clogin error: $_");
	print STDERR ("$host clogin error: $_") if ($debug);
	$clean_run = 0;
	last;
    }
    while (/[>#]\s*($cmds_regexp)\s*$/) {
	$cmd = $1;
	if (!defined($prompt)) {
	    $prompt = ($_ =~ /^([^#]+)/)[0];
	    $prompt =~ s/([][}{)(\\])/\\$1/g;
	    print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
	}
	print STDERR ("HIT COMMAND:$_") if ($debug);
	if (! defined($commands{$cmd})) {
	    print STDERR "$host: found unexpected command - \"$cmd\"\n";
	    $clean_run = 0;
	    last TOP;
	}
	$rval = &{$commands{$cmd}};
	delete($commands{$cmd});
	if ($rval == -1) {
	    $clean_run = 0;
	    last TOP;
	}
    }
}

print STDOUT "Done $logincmd: $_\n" if ($log);
# Flush History
ProcessHistory("","","","");
# Cleanup
close(INPUT);
close(OUTPUT);

if (defined($ENV{NOPIPE}) && $ENV{NOPIPE} =~ /^YES/i) {
    unlink("$host.raw") if (! $debug);
}

# check for completeness
if (scalar(%commands) || !$clean_run || !$found_end) {
    if (scalar(%commands)) {
	printf(STDOUT "$host: missed cmd(s): %s\n", join(',', keys(%commands)));
	printf(STDERR "$host: missed cmd(s): %s\n", join(',', keys(%commands))) if ($debug);
    }
    if (!$clean_run || !$found_end) {
	print STDOUT "$host: End of run not found\n";
	print STDERR "$host: End of run not found\n" if ($debug);
	system("/usr/bin/tail -1 $host.new");
    }
    unlink "$host.new" if (! $debug);
}
